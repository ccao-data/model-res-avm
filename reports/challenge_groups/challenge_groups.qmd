---
title: "Challenge Groups"
subtitle: "Run ID: `r params$run_id`"
date: "`r Sys.Date()`"
author: "Cook County Assessor's Office Data Department"
abstract-title: "Run Note"
abstract: '`r arrow::read_parquet(here::here("output/metadata/model_metadata.parquet"))$run_note`'
execute:
  echo: false
  warning: false
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
    fig-align: center
    fontsize: 12pt
knitr:
  opts_chunk:
    out.width: "100%"
editor: source
params:
  run_id: "2025-01-10-serene-boni"
  year: "2025"
---

```{r _setup_script}
source("../_setup.R")
```

---

This report inspects properties that are difficult to assess. All outputs below are for the entirety of Cook County. The universe of sold data is from the prior year of sales. Challenge groups include:

|      Group      | Description                                                                                     |
|:---------------:|-------------------------------------------------------------------------------------------------|
| **Large Lots**  | Parcels with land square footage larger than 95% of other properties for this year and township |
|  **Multicard**  | Parcels with more than one building (ADU, coach house, etc.)                                    |
| **Multifamily** | Class 211 parcels                                                                               |
| **Top Decile**  | The top 10% of assessed values by township from the prior year                                  |

<br><br>

## Topline Stats for All Properties

```{r _challenge_groups_topline_stats_all}
datasets_full <- list(
  "Large Lots" = "flag_land_gte_95_percentile",
  "Multicard" = "flag_pin_is_multicard",
  "Multifamily" = "flag_class_211",
  "Top Decile" = "flag_prior_near_fmv_top_decile"
) %>% map(\(x) {
  assessment_pin %>%
    mutate(flag_class_211 = meta_class == "211") %>%
    filter(get(x)) %>%
    select(
      meta_pin, pred_pin_final_fmv_round, sale_ratio_study_price, loc_latitude,
      loc_longitude, prior_near_tot, meta_township_code, meta_class
    )
})

map2(datasets_full, names(datasets_full), \(.x, .y) {
  N <- nrow(.x)
  median_pred <- median(.x$pred_pin_final_fmv_round, na.rm = TRUE)
  median_prior <- median(.x$prior_near_tot, na.rm = TRUE)
  percent_change <- with(
    .x, (pred_pin_final_fmv_round - prior_near_tot) / prior_near_tot * 100
  )
  median_percent_change <- median(percent_change, na.rm = TRUE)

  data.frame(
    Dataset = .y,
    Count = N,
    "Median Prior" = scales::dollar(round(median_prior, 2)),
    "Median Predicted" = scales::dollar(round(median_pred, 2)),
    "Median Percent Change" = scales::percent(median_percent_change / 100)
  )
}) %>%
  bind_rows() %>%
  rename(
    "Median Prior" = "Median.Prior",
    "Median Predicted" = "Median.Predicted",
    "Median Percent Change" = "Median.Percent.Change"
  ) %>%
  kable(
    format = "html",
    digits = 2,
    row.names = FALSE,
    format.args = list(big.mark = ","),
    align = rep("c", 5)
  ) %>%
  kable_styling()
```

## Ratio Stats for Sold Properties

```{r _challenge_groups_topline_stats_sold}
datasets_sold <- datasets_full %>%
  map(\(x){
    x %>% filter(!is.na(sale_ratio_study_price))
  })

gte_n <- \(n_sales, min_n, fn, na_type) {
  ifelse(sum(!is.na(n_sales)) >= min_n, fn, na_type)
}

min_n <- 10

rs_fns_list <- list(
  cod_no_sop = \(x, y) gte_n(y, 2, cod(x / y, na.rm = TRUE), NA_real_),
  prd_no_sop = \(x, y) gte_n(y, 2, prd(x, y, na.rm = TRUE), NA_real_),
  prb_no_sop = \(x, y) gte_n(y, 2, prb(x, y, na.rm = TRUE), NA_real_),
  mki_no_sop = \(x, y) gte_n(y, 2, mki(x, y, na.rm = TRUE), NA_real_),
  cod = \(x, y) gte_n(y, min_n, cod(x / y, na.rm = TRUE), NA_real_),
  cod_met = \(x, y) gte_n(y, min_n, cod_met(cod(x / y, na.rm = TRUE)), NA),
  prd = \(x, y) gte_n(y, min_n, prd(x, y, na.rm = TRUE), NA_real_),
  prd_met = \(x, y) gte_n(y, min_n, prd_met(prd(x, y, na.rm = TRUE)), NA),
  prb = \(x, y) gte_n(y, min_n, prb(x, y, na.rm = TRUE), NA_real_),
  prb_met = \(x, y) gte_n(y, min_n, prb_met(prb(x, y, na.rm = TRUE)), NA),
  mki = \(x, y) gte_n(y, min_n, mki(x, y, na.rm = TRUE), NA_real_),
  mki_met = \(x, y) gte_n(y, min_n, mki_met(mki(x, y, na.rm = TRUE)), NA),
  min = \(x) min(x, na.rm = TRUE),
  q25 = \(x) quantile(x, na.rm = TRUE, probs = 0.25),
  median = \(x) median(x, na.rm = TRUE),
  median_sale = \(x, y) median(y, na.rm = TRUE),
  median_ratio = \(x, y) median(x / y, na.rm = TRUE),
  q75 = \(x) quantile(x, na.rm = TRUE, probs = 0.75),
  max = \(x) max(x, na.rm = TRUE)
)

# Some functions require 2 or 1 arguments.
apply_functions <- function(dataset, dataset_name) {
  x <- dataset$pred_pin_final_fmv_round
  y <- dataset$sale_ratio_study_price

  results_rs <- lapply(rs_fns_list, function(f) {
    if (length(formals(f)) == 2) {
      f(x, y)
    } else {
      f(x)
    }
  })

  results_df <- as.data.frame(results_rs)
  results_df$count <- nrow(dataset)
  results_df$median_prior_near_tot <- median(dataset$prior_near_tot, na.rm = TRUE)
  results_df$dataset <- dataset_name

  return(results_df)
}

results <- bind_rows(
  lapply(names(datasets_sold), function(dataset_name) {
    apply_functions(datasets_sold[[dataset_name]], dataset_name)
  })
)

results %>%
  as.data.frame() %>%
  mutate(
    median_change = scales::percent(
      (median - median_prior_near_tot) / median_prior_near_tot
    ),
    min = scales::dollar(round(min, 2)),
    q25 = scales::dollar(round(q25, 2)),
    median = scales::dollar(round(median, 2)),
    `Median Previous Estimate` = scales::dollar(
      round(median_prior_near_tot, 2)
    ),
    q75 = scales::dollar(round(q75, 2)),
    max = scales::dollar(round(max, 2))
  ) %>%
  select(
    Dataset = dataset,
    Count = count,
    "Median YoY Change" = median_change,
    "Median Ratio" = median_ratio,
    COD = cod, PRB = prb, PRD = prd, MKI = mki,
    Min = min, Q25 = q25,
    "Median Predicted" = median,
    "Median Sale" = median_sale,
    "Median Previous Estimate",
    Q75 = q75, Max = max
  ) %>%
  kable(
    format = "html",
    digits = 2,
    row.names = FALSE,
    format.args = list(big.mark = ","),
    align = rep("l", 15)
  ) %>%
  kable_styling()
```

## Relationship Between Sale and Assessed Values

Sale and assessed values are capped at \$2M to increase legibility.

```{r}
plots <- datasets_sold %>%
  map(\(dataset) {
    dataset$tooltip_text <- paste0(
      "Pin: ", dataset$meta_pin,
      "\nTownship: ", ccao::town_convert(dataset$meta_township_code)
    )

    # Create the ggplot
    p <- ggplot(dataset, aes(
      x = sale_ratio_study_price,
      y = pred_pin_final_fmv_round
    )) +
      geom_point(aes(text = tooltip_text)) +
      geom_abline(intercept = 0, slope = 1, color = "red") +
      scale_x_continuous(
        labels = dollar_format(), name = "Actual FMV", limits = c(0, 2000000)
      ) +
      scale_y_continuous(
        labels = dollar_format(), name = "Estimated FMV", limits = c(0, 2000000)
      ) +
      theme_minimal()

    # Convert to a plotly object
    ggplotly(p, tooltip = "tooltip_text")
  })
```

::: panel-tabset

### Large Lots

```{r, results = 'asis'}
plots$"Large Lots"
```

### Multicard

```{r, results = 'asis'}
plots$Multicard
```

### Multifamily

```{r, results = 'asis'}
plots$Multifamily
```

### Top Decile

```{r, results = 'asis'}
plots$"Top Decile"
```

:::

## Top and Bottom 10 (FMV / Sale Price) Ratios

```{r}
outliers <- datasets_sold %>%
  map(\(x) {
    x %>%
      mutate(
        Ratio = pred_pin_final_fmv_round / sale_ratio_study_price,
        Township = ccao::town_convert(meta_township_code),
        `Final Fmv` = dollar(pred_pin_final_fmv_round),
        `Sale Price` = dollar(sale_ratio_study_price),
        `Prior Value` = dollar(prior_near_tot)
      ) %>%
      filter(
        rank(-Ratio) <= 10 | rank(Ratio) <= 10
      ) %>%
      mutate(Type = if_else(rank(-Ratio) <= 10, "Top 10", "Bottom 10")) %>%
      arrange(Type, Ratio) %>%
      select(
        Pin = meta_pin,
        `Final Fmv`,
        `Sale Price`,
        Ratio,
        Type,
        Township,
        `Prior Value`,
        Class = meta_class
      )
  })
```

```{r _challenge_groups_outliers, results = 'asis'}
generate_tabset <- function(outliers) {
  cat("::: panel-tabset\n\n")

  iwalk(outliers, ~ {
    cat("## ", .y, "\n\n")

    print(
      kable(
        .x,
        format = "html",
        digits = 2,
        row.names = FALSE,
        format.args = list(big.mark = ",")
      ) %>% kable_styling()
    )

    cat("\n\n")
  })

  cat(":::\n")
}

generate_tabset(outliers)
```

```{r _challenge_groups_map_function}
plots <- datasets_full %>%
  map(\(x) {
    spatial_data <- st_as_sf(
      x %>%
        filter(!is.na(loc_latitude) & !is.na(loc_longitude)),
      coords = c("loc_longitude", "loc_latitude"), crs = 4326
    ) %>%
      mutate(
        Change = pmin(
          100 * (pred_pin_final_fmv_round - prior_near_tot) / prior_near_tot,
          300
        )
      )

    town_shp <- st_transform(ccao::town_shp, crs = st_crs(spatial_data))

    ggplot() +
      geom_sf(data = spatial_data, aes(color = Change), alpha = 0.5) +
      geom_sf(data = town_shp, fill = NA, color = "black") +
      theme_minimal() +
      labs(color = "Change (%)") +
      scale_color_gradient2(
        midpoint = 0,
        low = "blue",
        mid = "lightgrey",
        high = "red",
        limits = c(-100, 300)
      ) +
      theme(
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank()
      )
  })
```

## Map of YoY Changes in Assessed Value

Values are capped at an increase of 300% to increase legibility. This includes sold and unsold properties.

::: panel-tabset

```{r _challenge_groups_map_output, results = 'asis'}
iwalk(plots, ~ {
  cat("## ", .y, "\n\n")

  print(.x)

  cat("\n\n")
})
```

:::

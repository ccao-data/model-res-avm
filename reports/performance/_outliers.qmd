```{r _outliers_setup_script}
source("../_setup.R")
```

# Outliers

This section examines flagged, non-arms-length sales, hereafter called "outliers". These sales are identified via a [dedicated sales validation model](https://github.com/ccao-data/model-sales-val). Note that unless otherwise specified, all figures and tables include data from _all triads_.

## Counts and Percentages

::: panel-tabset

As of 12/6/2024, we have three columns that represent distinct outlier reasons.

Sales are considered outliers only if they meet specific price-related
criteria. Namely, if their price falls a certain number of standard deviations
away from the average price within a comparable property group. We will focus
exclusively on these price-based factors that determine outlier status.

### Count by Type

```{r _outliers_type_breakdown}
# Subset important outlier information
training_data <- training_data %>%
  mutate(
    outlier_reasons_to_graph = case_when(
      sv_is_outlier & !is.na(sv_outlier_reason2) ~
        paste0(sv_outlier_reason1, " (", sv_outlier_reason2, ")"),
      sv_is_outlier & is.na(sv_outlier_reason2) ~ sv_outlier_reason1,
      TRUE ~ NA_character_
    )
  )

# Determine the axis limit
y_lim_axis_outlier_breakdown <- training_data %>%
  filter(sv_is_outlier) %>%
  count(outlier_reasons_to_graph) %>%
  summarise(max_value = max(n)) %>%
  pull(max_value)


training_data %>%
  filter(sv_is_outlier) %>%
  count(outlier_reasons_to_graph) %>%
  filter(n > 20) %>%
  ggplot(aes(x = reorder(outlier_reasons_to_graph, -n), y = n)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = comma(n)), vjust = -0.5) +
  ylim(0, 1.05 * y_lim_axis_outlier_breakdown) +
  labs(y = "Number of Sales", x = "Outlier Reasons") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 70, hjust = 1),
    axis.text.y = element_text(angle = 45, hjust = 1),
    axis.title.y = element_blank(),
    axis.title.x = element_blank()
  )
```

### Count by Type and Year

```{r _outliers_type_breakdown_table}
training_data %>%
  filter(sv_is_outlier) %>%
  group_by(meta_year, outlier_reasons_to_graph) %>%
  summarise(n = n()) %>%
  rename(Year = meta_year) %>%
  pivot_wider(id_cols = Year, names_from = outlier_reasons_to_graph, values_from = n) %>%
  kable() %>%
  kable_styling("striped")

training_data %>%
  filter(sv_is_outlier) %>%
  group_by(meta_year, outlier_reasons_to_graph) %>%
  summarise(n = n(), .groups = "drop") %>%
  rename(Year = meta_year) %>%
  pivot_wider(id_cols = Year, names_from = outlier_reasons_to_graph, values_from = n) %>%
  kable() %>%
  kable_styling("striped")
```

### Percentage by Class

```{r _outliers_pct_class}
training_data %>%
  summarise(
    percent = mean(case_when(sv_is_outlier ~ 1, TRUE ~ 0)),
    .by = meta_class
  ) %>%
  filter(!meta_class %in% c("218", "219")) %>%
  ggplot(aes(x = meta_class, y = percent)) +
  geom_bar(stat = "identity") +
  geom_text(
    mapping = aes(label = scales::percent(percent, accuracy = .1)),
    hjust = -0.1,
    angle = 90
  ) +
  theme_minimal() +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(add = c(0, 0.02))
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank()
  )
```

### Percentage by Township

```{r _outliers_pct_township}
y_lim_axis_outlier_townships <- training_data %>%
  group_by(meta_township_name) %>%
  summarise(percent = mean(case_when(sv_is_outlier == TRUE ~ 1, TRUE ~ 0))) %>%
  ungroup() %>%
  slice_max(percent, n = 1) %>%
  pull(percent)

training_data %>%
  summarise(
    percent = mean(case_when(sv_is_outlier ~ 1, TRUE ~ 0)),
    .by = c(meta_township_name, meta_triad_name)
  ) %>%
  ggplot(aes(x = reorder(meta_township_name, -percent), y = percent)) +
  geom_bar(stat = "identity") +
  geom_text(
    mapping = aes(label = scales::percent(percent, accuracy = .1)),
    hjust = -0.1,
    angle = 90,
    size = 2.5
  ) +
  theme_minimal() +
  scale_y_continuous(
    labels = scales::percent_format(),
    limits = c(0, 1.15 * y_lim_axis_outlier_townships)
  ) +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
  ) +
  facet_wrap(vars(meta_triad_name), scales = "free_x")
```

:::

## Distributions

::: panel-tabset

### By Outlier Status

```{r _outliers_dist_price}
training_data %>%
  summarise(
    Min = min(meta_sale_price),
    Median = median(meta_sale_price),
    Mean = mean(meta_sale_price),
    Max = max(meta_sale_price),
    `Std. Dev.` = sd(meta_sale_price),
    .by = sv_is_outlier
  ) %>%
  mutate(Category = ifelse(sv_is_outlier, "Outlier", "Not Outlier")) %>%
  relocate(Category, .before = NULL) %>%
  select(-sv_is_outlier) %>%
  mutate(across(Min:`Std. Dev.`, dollar)) %>%
  kable() %>%
  kable_styling(full_width = TRUE)

training_data %>%
  mutate(
    Category = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    Category = factor(Category, levels = c("Outlier", "Not Outlier"))
  ) %>%
  filter(meta_sale_price < 1.5e7) %>%
  ggplot(aes(meta_sale_price, fill = Category)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  labs(x = "Log Sale Price") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_log10(labels = scales::dollar_format()) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank()
  )
```

### By Price Per Square Foot

```{r _outliers_dist_price_per_sqft}
outliers_dist_price_per_sqft <- training_data %>%
  filter(!is.na(char_bldg_sf) & char_bldg_sf > 0) %>%
  mutate(ppsf = meta_sale_price / char_bldg_sf)
outliers_dist_price_per_sqft %>%
  summarise(
    Min = min(ppsf),
    Median = median(ppsf),
    Mean = mean(ppsf),
    Max = max(ppsf),
    `Std. Dev` = sd(ppsf),
    .by = sv_is_outlier
  ) %>%
  mutate(Category = ifelse(sv_is_outlier, "Outlier", "Not outlier")) %>%
  relocate(Category, .before = NULL) %>%
  select(-sv_is_outlier) %>%
  mutate(across(Min:`Std. Dev`, dollar)) %>%
  kable() %>%
  kable_styling(full_width = TRUE)
outliers_dist_price_per_sqft %>%
  mutate(
    Category = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    Category = factor(Category, levels = c("Outlier", "Not Outlier"))
  ) %>%
  filter(meta_sale_price < 2.5e6) %>%
  ggplot(aes(ppsf, fill = Category)) +
  geom_density(alpha = 0.5) +
  labs(title = "Cumulative Distribution") +
  theme_minimal() +
  labs(x = "Log Price Per Square Foot") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_log10(labels = scales::dollar_format()) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank()
  )
```

### By Township

```{r _outliers_dist_township, fig.height=8, fig.width=7}
training_data %>%
  filter(meta_triad_name == run_triad) %>%
  mutate(
    township_name = ccao::town_convert(meta_township_code),
    Category = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    Category = factor(Category, levels = c("Outlier", "Not Outlier"))
  ) %>%
  filter(meta_sale_price < 2.5e6) %>%
  ggplot(aes(meta_sale_price, fill = Category)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  labs(x = "Log Sale Price") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_log10(labels = scales::dollar_format()) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  facet_wrap(vars(township_name), ncol = 3)
```

### By Class

```{r _outliers_dist_class, fig.height=8, fig.width=7}
training_data %>%
  filter(
    meta_triad_name == run_triad,
    !meta_class %in% c("218", "219")
  ) %>%
  mutate(
    township_name = ccao::town_convert(meta_township_code),
    Category = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    Category = factor(Category, levels = c("Outlier", "Not Outlier"))
  ) %>%
  filter(meta_sale_price < 5e6) %>%
  ggplot(aes(meta_sale_price, fill = Category)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  labs(x = "Log Sale Price") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_log10(labels = scales::dollar_format()) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  facet_wrap(vars(meta_class), ncol = 3)
```

### Ratio Comparison

```{r _outliers_ratio_comparison, fig.height=8, fig.width=7}
outliers_ratio_comparison <- training_data %>%
  summarise(
    median_sale_price = median(meta_sale_price),
    .by = c(sv_is_outlier, meta_township_name)
  ) %>%
  arrange(meta_township_name, sv_is_outlier) %>%
  group_by(meta_township_name) %>%
  mutate(
    percent = last(median_sale_price) / first(median_sale_price),
    above_below = ifelse(percent > 1,
      "Outlier > Not Outlier", "Not Outlier > Outlier"
    ),
    above_below = factor(above_below,
      levels =
        c("Outlier > Not Outlier", "Not Outlier > Outlier")
    ),
    triad = ccao::town_get_triad(meta_township_name, name = TRUE)
  ) %>%
  distinct(meta_township_name, percent, above_below, triad)

outliers_ratio_comparison %>%
  ggplot(aes(x = reorder(meta_township_name, percent), y = percent)) +
  labs(
    fill = "Median Price"
  ) +
  geom_bar(stat = "identity", aes(fill = above_below)) +
  coord_flip() +
  geom_text(aes(label = round(percent, 2)), size = 3.2, hjust = -0.2) +
  scale_y_continuous(limits = c(0, 1.5)) +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    panel.grid.major.y = element_blank()
  ) +
  facet_wrap(vars(triad), ncol = 1, scales = "free_y", strip.position = "right")
```

:::

## Table Breakouts

::: panel-tabset

### By Outlier Type and Township

```{r _outliers_table_township_summary}
# This object is joined to itself using different filters, which is why this
# filtering is applied here rather than below.
outliers_table_township_summary <- training_data %>%
  filter(meta_class != "200" & meta_triad_name == run_triad)

outliers_table_township_summary <- outliers_table_township_summary %>%
  filter(sv_is_outlier) %>%
  summarise(
    `Min. Sale Price` = min(meta_sale_price, na.rm = TRUE),
    `Med. Sale Price` = median(meta_sale_price, na.rm = TRUE),
    `Max. Sale Price` = max(meta_sale_price, na.rm = TRUE),
    Count = n(),
    .by = c(outlier_reasons_to_graph, meta_township_name)
  ) %>%
  left_join(
    outliers_table_township_summary %>%
      filter(!sv_is_outlier) %>%
      summarise(
        `Med. Non-Outlier Sale Price` = median(meta_sale_price, na.rm = TRUE),
        .by = c(meta_township_name)
      ),
    by = join_by(meta_township_name)
  ) %>%
  mutate(across(contains("Sale"), dollar)) %>%
  relocate(meta_township_name) %>%
  dplyr::rename(
    "Outlier Type" = outlier_reasons_to_graph,
    "Township Name" = meta_township_name
  ) %>%
  arrange(`Township Name`, desc(Count))

outliers_table_township_summary %>%
  datatable(
    rownames = FALSE,
    filter = "top",
    options = list(
      columnDefs = list(
        list(className = "dt-center", targets = c(1)),
        list(className = "dt-right", targets = c(2:6))
      )
    )
  )
```

### By Outlier Type and Class

```{r _outliers_table_class_summary}
outliers_table_class_summary <- training_data %>%
  filter(meta_class != "200" & meta_triad_name == run_triad)

outliers_table_class_summary <- outliers_table_class_summary %>%
  filter(sv_is_outlier) %>%
  summarise(
    `Min. Sale Price` = min(meta_sale_price, na.rm = TRUE),
    `Med. Sale Price` = median(meta_sale_price, na.rm = TRUE),
    `Max. Sale Price` = max(meta_sale_price, na.rm = TRUE),
    Count = n(),
    .by = c(outlier_reasons_to_graph, meta_class)
  ) %>%
  left_join(
    outliers_table_class_summary %>%
      filter(!sv_is_outlier) %>%
      summarise(
        `Med. Non-Outlier Sale Price` = median(meta_sale_price, na.rm = TRUE),
        .by = c(meta_class)
      ),
    by = join_by(meta_class)
  ) %>%
  mutate(across(contains("Sale"), dollar)) %>%
  relocate(meta_class) %>%
  dplyr::rename(
    "Outlier Type" = outlier_reasons_to_graph,
    "Class" = meta_class
  ) %>%
  arrange(`Class`, desc(Count))

outliers_table_class_summary %>%
  datatable(
    rownames = FALSE,
    filter = "top",
    options = list(
      columnDefs = list(
        list(className = "dt-center", targets = c(1)),
        list(className = "dt-right", targets = c(2:6))
      )
    )
  )
```

:::

## Grouped by Decile

::: panel-tabset

### Share of Outliers by Decile

```{r _outliers_decile_share}
training_data %>%
  arrange(meta_sale_price) %>%
  mutate(decile = ntile(meta_sale_price, 10)) %>%
  summarise(
    percent = mean(case_when(sv_is_outlier == TRUE ~ 1, TRUE ~ 0)),
    lower_bound_short = shorten_number(min(meta_sale_price)),
    upper_bound_short = shorten_number(max(meta_sale_price)),
    .by = decile
  ) %>%
  mutate(
    custom_label = paste0(
      decile,
      "\n[", lower_bound_short, "-\n", upper_bound_short, "]"
    ),
    custom_label = forcats::fct_reorder(custom_label, decile)
  ) %>%
  ggplot(aes(x = custom_label, y = percent)) +
  geom_bar(stat = "identity") +
  geom_text(
    aes(label = scales::percent(percent, accuracy = 0.1)),
    vjust = 0,
    nudge_y = 0.005
  ) +
  theme_minimal() +
  scale_y_continuous(
    labels = scales::percent_format(),
    limits = c(0, NA),
    expand = expansion(add = c(0, 0.05))
  ) +
  scale_x_discrete(name = "Decile of Sale Price") +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.x = element_blank()
  )
```

### Outlier Types in Top Decile

```{r _outliers_decile_top}
outlier_decile_breakout <- function(data, dec) {
  outlier_decile_y_axis_lim <- data %>%
    arrange(meta_sale_price) %>%
    mutate(decile = ntile(meta_sale_price, 10)) %>%
    filter(decile == dec & sv_is_outlier == TRUE) %>%
    group_by(outlier_reasons_to_graph) %>%
    summarise(count = n()) %>%
    ungroup() %>%
    slice_max(count, n = 1) %>%
    pull(count)

  data %>%
    arrange(meta_sale_price) %>%
    mutate(decile = ntile(meta_sale_price, 10)) %>%
    filter(decile == dec & sv_is_outlier) %>%
    summarise(count = n(), .by = outlier_reasons_to_graph) %>%
    filter(count > 20) %>%
    ggplot(aes(x = reorder(outlier_reasons_to_graph, count), y = count)) +
    labs(
      y = "Number of Sales",
      x = "Outlier Types"
    ) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = comma(count)), vjust = -0.1) +
    scale_y_continuous(
      labels = comma,
      limits = c(0, 1.05 * outlier_decile_y_axis_lim)
    ) +
    theme_minimal() +
    theme(
      axis.text.y = element_text(hjust = 1),
      axis.title.y = element_blank(),
      axis.title.x = element_blank()
    ) +
    coord_flip()
}

outlier_decile_breakout(training_data, 10)
```

### Outlier Types in Bottom Decile

```{r _outliers_decile_bottom}
outlier_decile_breakout(training_data, 1)
```

:::

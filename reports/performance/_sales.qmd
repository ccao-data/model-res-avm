```{r _sales_setup_script}
source("../_setup.R")
```

# Sales

This section contains volume and sale price trends as present in the **training set**. All plots are limited to the triad of interest unless explicitly noted.

## Volume Trends

::: panel-tabset

### By Township and Year

_NOTE: Outliers are removed._

```{r _sales_volume_town_year}
sales_volume_town_year_plot <- training_data %>%
  filter(meta_triad_name == run_triad) %>%
  mutate(meta_year = as.numeric(meta_year)) %>%
  summarise(
    num_sales = sum(!sv_is_outlier, na.rm = TRUE),
    num_outliers = sum(sv_is_outlier, na.rm = TRUE),
    pct_outliers = scales::percent(num_outliers / num_sales, accuracy = 0.1),
    .by = c(meta_township_name, meta_year)
  ) %>%
  ungroup() %>%
  ggplot() +
  geom_line(
    mapping = aes(
      x = meta_year,
      y = num_sales,
      color = meta_township_name,
      group = meta_township_name,
      text = paste0(
        "Township: ", meta_township_name,
        "\nYear: ", meta_year,
        "\nNum. Sales: ", num_sales,
        "\nNum. Outliers: ", num_outliers,
        "\nPct. Outliers: ", pct_outliers
      )
    )
  ) +
  labs(x = "Year", y = "Number of Sales", color = "Township") +
  theme_minimal()

ggplotly(sales_volume_town_year_plot, tooltip = "text")
```

### By Class and Year

_NOTE: Outliers are removed._

```{r _sales_volume_class_year}
sales_volume_class_year_plot <- training_data %>%
  filter(meta_triad_name == run_triad) %>%
  mutate(meta_year = as.numeric(meta_year)) %>%
  summarise(
    num_sales = sum(!sv_is_outlier, na.rm = TRUE),
    num_outliers = sum(sv_is_outlier, na.rm = TRUE),
    pct_outliers = scales::percent(num_outliers / num_sales, accuracy = 0.1),
    .by = c(meta_class, meta_year)
  ) %>%
  ungroup() %>%
  ggplot() +
  geom_line(
    mapping = aes(
      x = meta_year,
      y = num_sales,
      color = meta_class,
      group = meta_class,
      text = paste0(
        "Class: ", meta_class,
        "\nYear: ", meta_year,
        "\nNum. Sales: ", num_sales,
        "\nNum. Outliers: ", num_outliers,
        "\nPct. Outliers: ", pct_outliers
      )
    )
  ) +
  labs(x = "Year", y = "Number of Sales", color = "Township") +
  theme_minimal()

ggplotly(sales_volume_class_year_plot, tooltip = "text")
```

### By Township and Quarter

_NOTE: Outliers are removed._

Sales by quarter for the previous 4 years. The goal is to see how different
segments of the market are changing as a proportion in each township. Sales are
binned into different groups based on price.

```{r _sales_volume_town_quarter, fig.height=8, fig.width=7}
training_data %>%
  filter(
    !sv_is_outlier,
    meta_triad_name == run_triad,
    meta_year >= as.numeric(metadata$input_max_sale_year) - 3
  ) %>%
  mutate(
    Bin = cut(
      meta_sale_price,
      breaks = c(1, 100000, 300000, 600000, 1000000, max(meta_sale_price)),
      labels = c(
        "$1 - $100K",
        "$100K - $300K",
        "$300K - $600K",
        "$600K - $1M",
        "$1M+"
      )
    ),
    date = floor_date(meta_sale_date, "quarter")
  ) %>%
  summarise(Sales = n(), .by = c(meta_township_name, date, Bin)) %>%
  select(Sales, Bin, Township = meta_township_name, date) %>%
  ggplot(aes(
    x = date,
    y = Sales,
    fill = Bin,
    group = Bin
  )) +
  geom_area() +
  scale_color_brewer(palette = "PuOr") +
  scale_x_date(date_breaks = "6 months") +
  labs(x = "Date", y = "Number of Sales", fill = "Price Bin") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(vars(Township), scales = "free_y", ncol = 3)
```

### By Outlier Status and Year

_NOTE: Includes sales from all triads._

```{r _sales_volume_outlier_year}
training_data %>%
  mutate(
    outlier = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    outlier = factor(outlier, c("Outlier", "Not Outlier"))
  ) %>%
  ggplot(aes(x = meta_year, group = sv_is_outlier)) +
  geom_bar(aes(fill = outlier)) +
  geom_text(
    mapping = aes(label = after_stat(count)),
    stat = "count",
    position = "stack",
    vjust = -0.3
  ) +
  scale_fill_discrete(name = "Outlier Status") +
  scale_y_continuous(
    labels = comma,
    limits = c(0, 60000)
  ) +
  labs(y = "Number of Sales", x = "Year") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    panel.grid.major.x = element_blank()
  )
```

### By Outlier Status and Month

_NOTE: Includes sales from all triads._

```{r _sales_volume_outlier_month}
training_data %>%
  mutate(
    outlier = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    outlier = factor(outlier, c("Outlier", "Not Outlier"))
  ) %>%
  ggplot(aes(x = time_sale_month_of_year, group = sv_is_outlier)) +
  geom_bar(aes(fill = outlier)) +
  labs(y = "Number of Sales", x = "Month of Year") +
  scale_y_continuous(labels = comma) +
  scale_x_continuous(breaks = 1:12, labels = month.name) +
  scale_fill_discrete(name = "Outlier Status") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.major.x = element_blank()
  ) +
  facet_wrap(vars(meta_year))
```

### By Quarter (All)

_NOTE: Includes sales from all triads._

```{r _sales_volume_quarter_all}
training_data %>%
  mutate(
    Year = lubridate::year(meta_sale_date),
    Quarter = paste0("Q", lubridate::quarter(meta_sale_date))
  ) %>%
  count(Year, Quarter) %>%
  tidyr::pivot_wider(names_from = Quarter, values_from = n) %>%
  mutate(across(starts_with("Q"), scales::comma)) %>%
  kable(align = c("l", rep("r", 4)))
```

### By Quarter (Outliers)

_NOTE: Includes sales from all triads._

```{r _sales_volume_quarter_outlier}
training_data %>%
  filter(sv_is_outlier) %>%
  mutate(
    Year = lubridate::year(meta_sale_date),
    Quarter = paste0("Q", lubridate::quarter(meta_sale_date))
  ) %>%
  count(Year, Quarter) %>%
  tidyr::pivot_wider(names_from = Quarter, values_from = n) %>%
  mutate(across(starts_with("Q"), scales::comma)) %>%
  kable(align = c("l", rep("r", 4)))
```

### By Quarter (Outlier Pct.)

_NOTE: Includes sales from all triads._

```{r _sales_volume_quarter_outlier_pct}
training_data %>%
  mutate(
    Year = lubridate::year(meta_sale_date),
    Quarter = paste0("Q", lubridate::quarter(meta_sale_date))
  ) %>%
  count(Year, Quarter, sv_is_outlier) %>%
  group_by(Year, Quarter) %>%
  mutate(outlier_pct = scales::percent(n / sum(n), accuracy = 0.01)) %>%
  filter(sv_is_outlier) %>%
  select(-n, -sv_is_outlier) %>%
  tidyr::pivot_wider(names_from = Quarter, values_from = outlier_pct) %>%
  kable(align = c("l", rep("r", 4)))
```

:::

## Price Trends

::: panel-tabset

### By Outlier Status and Year

_NOTE: Includes sales from all triads._

```{r _sales_price_outlier_year}
training_data %>%
  mutate(
    outlier = ifelse(sv_is_outlier, "Outlier", "Not Outlier"),
    outlier = factor(outlier, c("Outlier", "Not Outlier"))
  ) %>%
  summarise(
    median_price = median(meta_sale_price),
    .by = c(meta_year, outlier)
  ) %>%
  ggplot(aes(x = meta_year, y = median_price, group = outlier)) +
  geom_line(aes(color = outlier)) +
  scale_y_continuous(labels = dollar_format()) +
  scale_color_discrete(name = "Outlier Status") +
  labs(
    y = "Median Sale Price", x = "Year"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")
```

### Indexed by Township and Quarter

```{r _sales_price_index_township}
sales_price_index_nearest_year <- ccao::town_dict %>%
  filter(triad_name == run_triad) %>%
  slice(1) %>%
  pull(township_name) %>%
  ccao::town_get_assmnt_year(round_type = "floor") - 3

sales_price_index_township <- training_data %>%
  filter(
    meta_triad_name == run_triad,
    sv_is_outlier == FALSE,
    meta_year >= sales_price_index_nearest_year
  ) %>%
  mutate(date = floor_date(meta_sale_date, "quarter")) %>%
  group_by(date, meta_township_name, meta_triad_name) %>%
  summarise(
    median_price = median(meta_sale_price),
    num_sales = n()
  ) %>%
  group_by(meta_township_name, meta_triad_name) %>%
  mutate(median_price_change = (
    median_price /
      first(median_price, order_by = date)
  ) - 1) %>%
  ggplot(
    mapping = aes(
      x = date,
      y = median_price_change,
      group = meta_township_name
    )
  ) +
  geom_line(
    mapping = aes(
      color = meta_township_name,
      text = paste0(
        "Date: ", date, "\n",
        "Township: ", meta_township_name, "\n",
        "Median Price: ", scales::dollar(median_price), "\n",
        "Num. Sales: ", scales::comma(num_sales), "\n",
        "Pct. Change: ", scales::percent(median_price_change, accuracy = 0.01)
      )
    )
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_date(date_breaks = "6 months") +
  labs(
    y = "Median Sale Price",
    x = "Year",
    title = paste0(
      "Price / Price of ", sales_price_index_nearest_year, ", Outliers Excluded"
    ),
    color = "Township"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(sales_price_index_township, tooltip = "text")
```

### Indexed by Class and Quarter

```{r _sales_price_index_class}
sales_price_index_class <- training_data %>%
  filter(
    meta_triad_name == run_triad,
    sv_is_outlier == FALSE,
    meta_year >= sales_price_index_nearest_year
  ) %>%
  mutate(date = floor_date(meta_sale_date, "quarter")) %>%
  group_by(date, meta_class) %>%
  summarise(
    median_price = median(meta_sale_price),
    num_sales = n()
  ) %>%
  group_by(meta_class) %>%
  mutate(median_price_change = (
    median_price /
      first(median_price, order_by = date)
  ) - 1) %>%
  ggplot(
    mapping = aes(
      x = date,
      y = median_price_change,
      group = meta_class
    )
  ) +
  geom_line(
    mapping = aes(
      color = meta_class,
      text = paste0(
        "Date: ", date, "\n",
        "Class: ", meta_class, "\n",
        "Median Price: ", scales::dollar(median_price), "\n",
        "Num. Sales: ", scales::comma(num_sales), "\n",
        "Pct. Change: ", scales::percent(median_price_change, accuracy = 0.01)
      )
    )
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_date(date_breaks = "6 months") +
  labs(
    y = "Median Sale Price",
    x = "Year",
    title = paste0(
      "Price / Price of ", sales_price_index_nearest_year, ", Outliers Excluded"
    ),
    color = "Township"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplotly(sales_price_index_class, tooltip = "text")
```

:::



```{r}
#| cache: true
#| cache-extra: !expr rlang::hash(params)
#| cache-file-1: !expr rlang::hash_file("_baseline_query_data.qmd")
#| cache-file-2: !expr rlang::hash_file("_utils.R")
```


```{r _data_changes_setup_script}
source("_baseline_query_data.R")
```

# Changed Values by Year

```{r}
library(data.table)
library(dplyr)
library(tidyr)
library(DT)

base_tol <- list(
  meta_sale_count_past_n_years = 1,
  loc_longitude = 0.005,
  loc_latitude = 0.005
)

card_data <- rbind(comp_chars, baseline_chars)

dt <- as.data.table(card_data) %>%
  arrange(meta_pin, meta_card_num) %>%
  rename(year = meta_year) %>%
  as.data.table()

# build tolerance list: any column ending with "dist_ft" gets tolerance 5
dist_cols <- grep("dist_ft$", names(dt), value = TRUE)
suffix_tol <- setNames(as.list(rep(5, length(dist_cols))), dist_cols)

# combine to ONE named list so [[nm]] works
tol <- c(base_tol, suffix_tol)

dt <- dt %>% slice(1:10000)

# helper to fetch tolerance or 0
get_tol <- function(nm) {
  val <- tol[[nm]]
  if (is.null(val)) 0 else as.numeric(val)
}
card_data <- rbind(comp_chars, baseline_chars)

dt <- as.data.table(card_data) %>%
  arrange(meta_pin, meta_card_num) %>%
  rename(year = meta_year)

distinct <- dt[, lapply(.SD, function(x) uniqueN(unlist(x)) > 1),
  by = .(meta_pin, meta_card_num)
]

distinct <- as.data.table(distinct)[, !c("meta_pin", "meta_card_num")]

percentage_true <- distinct[, lapply(
  .SD,
  function(x) mean(x, na.rm = TRUE) * 100
)]
# Count of distinct values
count_true <- distinct[, lapply(.SD, function(x) sum(x, na.rm = TRUE))]

count_true_long <- count_true %>%
  pivot_longer(
    cols = everything(),
    names_to = "Column", values_to = "Count"
  )

DT::datatable(count_true_long,
  options = list(
    scrollY = "300px",
    scrollX = TRUE,
    paging = FALSE,
    searching = TRUE
  ),
  rownames = FALSE
)
```

```{r}
distinct_vals <- dt[, lapply(.SD, function(x) {
  x <- as.character(x)
  if (uniqueN(x) == 1) NA_character_ else x
}),
by = .(meta_pin, meta_card_num)
]
# Keep only observations with a valid year

distinct_vals <- distinct_vals %>% filter(!is.na(year))

# Pivot wider so values are side-by-side by year
distinct_wide <- dcast(
  distinct_vals,
  meta_pin + meta_card_num ~ year,
  value.var = setdiff(
    names(distinct_vals),
    c("meta_pin", "meta_card_num", "year")
  ),
  sep = "_"
)

DT::datatable(
  distinct_wide,
  extensions = "Scroller",
  options = list(
    deferRender = TRUE,
    scrollY = 400,
    scroller = TRUE,
    scrollX = TRUE,
    paging = FALSE,
    searching = TRUE
  ),
  rownames = FALSE
)
```




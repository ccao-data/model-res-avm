---
title: "Missingness Testing Doc"
format: html
---

```{r}

suppressPackageStartupMessages({
  library(DBI)
  library(igraph)
  library(noctua)
})

# Adds arrow support to speed up ingest process.
noctua_options(unload = TRUE)

# Establish Athena connection
AWS_ATHENA_CONN_NOCTUA <- dbConnect(
  noctua::athena(),
  rstudio_conn_tab = FALSE
)



library(arrow)
library(sf)
library(ggplot2)
```

# Question 1: ACS Features

```{r}
census <- dbGetQuery(
  AWS_ATHENA_CONN_NOCTUA, "
  SELECT median_household_renter_occupied_gross_rent,
  median_household_total_occupied_year_built, 
  median_income_household_past_year,
  year,
  geoid
  FROM census.vw_acs5_stat
  WHERE year >= '2015'
  and geography = 'tract'
  "
)

census %>%
  group_by(year) %>%
  summarise(across(everything(), ~ sum(is.na(.))))


```


```{r}
fireplaces <- dbGetQuery(
  AWS_ATHENA_CONN_NOCTUA, "
  SELECT wbfp_o, taxyr
  FROM iasworld.dweldat
  WHERE taxyr >= '2015'
  "
)

fireplaces$wbfp_o <- as.factor(fireplaces$wbfp_o)

fireplace_count <- fireplaces %>%
  group_by(taxyr, wbfp_o) %>%
  summarise(count = n(), .groups = "drop") %>%
  ungroup() %>%
  filter(is.na(wbfp_o)) %>%
  arrange(desc(taxyr))

```
```{r}
location_missingness <- dbGetQuery(
  AWS_ATHENA_CONN_NOCTUA, "
  SELECT lon, lat, x_3435, y_3435, year
  FROM default.vw_pin_universe
  WHERE year >= '2015'
  "
)

location_missingness_count <- location_missingness %>%
  filter(is.na(lon) | is.na(lat) | is.na(x_3435) | is.na(y_3435)) %>%
  group_by(year) %>%
  summarise(count = n(), .groups = "drop") %>%
  ungroup() %>%
  arrange(desc(year))

```
```{r}
roads <- dbGetQuery(
  AWS_ATHENA_CONN_NOCTUA, "
  SELECT *
  FROM spatial.road
  WHERE year >= '2015'
  "
)
test_sf <- training_data %>%
         filter(is.na(prox_nearest_road_highway_daily_traffic)) %>%
  group_by(year) %>%
  summarise(count = n(), .groups = "drop")


roads_na <- roads %>%
  filter(is.na(daily_traffic)) %>%
  filter(road_type == "Freeway and Expressway" | road_type == "Interstate")

roads_na <- roads_na %>%
  group_by(year) %>%
  summarise(count = n(), .groups = "drop")

print(roads_na)

```


```{r}
missing_golf_courses <- training_data %>%
  filter(is.na(prox_nearest_golf_course_dist_ft)) 

percent_na <- missing_golf_courses %>%
  summarise(percent_na = round(mean(is.na(loc_x_3435)) * 100)) %>%
  pull()

print(paste0("Percent of missing values w/ missing loc_x_3435: ", percent_na, "%"))
```




```{r}
missing_schools <- training_data %>%
  filter(is.na(loc_school_elementary_district_geoid)) 

print(paste0("Number of missing schools: ", nrow(missing_schools)))

missing_schools <- missing_schools %>%
    filter(!is.na(loc_latitude))

print(paste0("Number of missing schools with valid latitude: ", nrow(missing_schools)))

missing_schools <- missing_schools %>%
  filter(!is.na(loc_school_unified_district_geoid))

print(paste0("Number of missing schools with unified district geoid: ", nrow(missing_schools)))

```

```{r}
foreclosures <- training_data %>%
  summarize(min_foreclosures = min(prox_num_foreclosure_per_1000_pin_past_5_years, na.rm = TRUE)) %>%
  pull(min_foreclosures)

print(paste0("Minimum number of foreclosures per 1000 PINs in the past 5 years: ", foreclosures))
```


```{r}
CMAP <- training_data %>%
  filter(is.na(loc_access_cmap_walk_total_score)) %>%
  select(meta_pin, year, loc_access_cmap_walk_total_score) %>%
  pull(meta_pin) %>%
  unique()

query <- glue_sql(
  "SELECT pin, class
   FROM default.vw_pin_universe
   WHERE year = '2017'"
)

walk_scores <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

common_walk_scores <- walk_scores %>%
  filter(pin %in% CMAP)

# Count the number of overlapping pins
overlap_count <- nrow(common_walk_scores)

# Print the results
print(common_walk_scores)
print(overlap_count)

```
```{r}
query <- glue_sql(
"SELECT dwel.parid as pin, 
    dwel.class,
    dwel.yrblt AS char_yrblt,
    dwel.sfla AS char_bldg_sf,
    dwel.rmbed AS char_beds,
    dwel.rmtot AS char_rooms,
    dwel.fixbath AS char_fbath,
    dwel.fixhalf AS char_hbath,
    dwel.wbfp_o AS char_frpl,
    dwel.taxyr as year,
    dwel.stories AS char_type_resd,
    dwel.grade AS char_cnst_qlty,
    dwel.user14 AS char_apts,
    dwel.user4 AS char_tp_dsgn,
    dwel.user6 AS char_attic_fnsh,
    dwel.user31 AS char_gar1_att,
    dwel.user32 AS char_gar1_area
FROM iasworld.dweldat as dwel
where class = '218' or class = '219'"
)

iasworld <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

iasworld %>%
  group_by(year) %>%
  summarise(across(everything(), ~ (sum(is.na(.)) / n()) * 100)) %>%
  filter(year >= 2016)

```
```{r}
query <- glue_sql(
  "SELECT * 
  from z_ci_724_modify_foreclosure_script_for_values_of_0_proximity.cnt_pin_num_foreclosure"
)

data_1 <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

query <- glue_sql(
  "SELECT * 
  from proximity.cnt_pin_num_foreclosure"
)

data_2 <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

data_3 <- data_1 %>%
  inner_join(data_2, by = c("pin10", "year")) %>%
  arrange(desc(year))
             
diff <- data_3 %>%
  filter(num_foreclosure_per_1000_pin_past_5_years.x != num_foreclosure_per_1000_pin_past_5_years.y |
         num_foreclosure_in_half_mile_past_5_years.x != num_foreclosure_in_half_mile_past_5_years.y)

test <- data_3 %>%
  slice(1:1000)
```

```{r}
query <- glue_sql(
  "SELECT 
  loc_school_elementary_district_geoid,
  loc_school_secondary_district_geoid,
  loc_school_unified_district_geoid,
  meta_pin,
  meta_year
  from 
  z_ci_722_modify_school_districts_to_fill_with_unified_school_district_if_possible_model.vw_pin_shared_input"
)

data_4 <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

query <- glue_sql(
  "SELECT
  loc_school_elementary_district_geoid,
  loc_school_secondary_district_geoid,
  loc_school_unified_district_geoid,
  meta_pin,
  meta_year 
  from 
  model.vw_pin_shared_input"
)

data_5 <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

data_6 <- data_4 %>%
  inner_join(data_5, by = c("meta_pin", "meta_year"))

diff <- data_6 %>%
  filter(loc_school_elementary_district_geoid.x != loc_school_elementary_district_geoid.y |
         loc_school_secondary_district_geoid.x != loc_school_secondary_district_geoid.y |
         loc_school_unified_district_geoid.x != loc_school_unified_district_geoid.y)

```


```{r}
rows_with_empty <- training_data[apply(training_data, 1, function(x) any(x == "")), ]

columns_with_empty <- rows_with_empty[, apply(rows_with_empty, 2, function(x) any(x == ""))]
```


---
title: "2024-2025 chars check"
format: html
params:
  run_id_comp: "2025-02-11-charming-eric"
  run_id_new: "2025-10-05-didactic-rob"
---

```{r}
library(arrow)
library(data.table)
library(DBI)
library(dplyr)
library(glue)
library(noctua)
library(tidyr)
```


```{r}
noctua_options(unload = TRUE)

AWS_ATHENA_CONN_NOCTUA <- dbConnect(
  noctua::athena(),
  rstudio_conn_tab = FALSE
)
```

```{r}
query <- glue("
  SELECT
    run_id,
    year,
    model_predictor_all_name
  FROM model.metadata
  WHERE run_id IN ('{params$run_id_comp}', '{params$run_id_new}')
")

variable_list <- dbGetQuery(AWS_ATHENA_CONN_NOCTUA, query)

# unlist variable_list$model_predictor_all_name and get unique values
variable_list <- unique(unlist(variable_list$model_predictor_all_name))

# remove meta_ char_ loc_ prox_ acs_5 time_and shp_ prefixes
variable_list <- variable_list %>%
  gsub("^(meta_|char_|loc_|prox_|acs5_|acs_|time_and_|shp_)", "", .)

# Take first year of run_ids
comp_year <- as.character(substr(params$run_id_comp, 1, 4))
new_year <- as.character(substr(params$run_id_new, 1, 4))

query <- glue("
  SELECT *
  FROM model.vw_card_res_input
  WHERE year BETWEEN '{comp_year}' AND '{new_year}'
")

card_data <- dbGetQuery(conn = AWS_ATHENA_CONN_NOCTUA, query) %>%
  select(any_of(c("meta_pin", "meta_card_num", "year", variable_list)))

query <- glue("
  SELECT *
  FROM model.vw_pin_shared_input
  WHERE meta_year BETWEEN '{comp_year}' AND '{new_year}'
")

pin_data <- dbGetQuery(conn = AWS_ATHENA_CONN_NOCTUA, query) %>%
  select(any_of(c("meta_pin", "meta_year", variable_list)))
```

```{r}
dt <- as.data.table(assessment_data)[order(meta_pin, decreasing = TRUE)]

distinct_filename <- "distinct.parquet"
if (file.exists(distinct_filename)) {
  distinct <- read_parquet(distinct_filename)
} else {
  distinct <- dt[, lapply(.SD, function(x) uniqueN(unlist(x)) > 1),
    by = .(meta_pin, meta_card_num)
  ]
  write_parquet(distinct, "distinct.parquet")
}

distinct <- as.data.table(distinct) %>%
  select(-c("meta_pin", "meta_card_num"))

# Percentage of distinct values
percentage_true <- distinct[, lapply(
  .SD,
  function(x) mean(x, na.rm = TRUE) * 100
)]

# Count of distinct values (probably more useful)
count_true <- distinct_a[, lapply(.SD, function(x) sum(x, na.rm = TRUE))]

count_true_long <- count_true %>%
  pivot_longer(cols = everything(), names_to = "Column", values_to = "Count")

write.csv(count_true_long, "ei-issue_0214.csv")
```

```{r}
# This returns the unique values rather than counts.
distinct_values_filename <- "distinct_values.parquet"
if (file.exists(distinct_values_filename)) {
  distinct <- read_parquet(distinct_values_filename)
} else {
  distinct <- dt[, lapply(.SD, function(x) {
    x <- as.character(x) # Convert to character
    if (uniqueN(x) == 1) NA_character_ else x
  }), by = .(meta_pin, meta_card_num)]
  write_parquet(distinct, distinct_values_filename)
}

# Makes it so values are only 2023 and 2024
distinct <- distinct %>%
  filter(!is.na(year))

# Pivot wider so values are side by side
distinct_wide <- dcast(distinct, meta_pin + meta_card_num ~ year,
  value.var = setdiff(names(distinct), c("meta_pin", "meta_card_num", "year")),
  sep = "_"
)
```
